{"ast":null,"code":"import { OrthographicCamera, PlaneBufferGeometry, Mesh } from \"../../../build/three.module.js\";\nfunction Pass() {\n  // if set to true, the pass is processed by the composer\n  this.enabled = true;\n\n  // if set to true, the pass indicates to swap read and write buffer after rendering\n  this.needsSwap = true;\n\n  // if set to true, the pass clears its buffer before rendering\n  this.clear = false;\n\n  // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n  this.renderToScreen = false;\n}\nObject.assign(Pass.prototype, {\n  setSize: function setSize( /* width, height */) {},\n  render: function render( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */\n  ) {\n    console.error('THREE.Pass: .render() must be implemented in derived pass.');\n  }\n});\n\n// Helper for passes that need to fill the viewport with a single quad.\n\n// Important: It's actually a hack to put FullScreenQuad into the Pass namespace. This is only\n// done to make examples/js code work. Normally, FullScreenQuad should be exported\n// from this module like Pass.\n\nPass.FullScreenQuad = function () {\n  var camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  var geometry = new PlaneBufferGeometry(2, 2);\n  var FullScreenQuad = function FullScreenQuad(material) {\n    this._mesh = new Mesh(geometry, material);\n  };\n  Object.defineProperty(FullScreenQuad.prototype, 'material', {\n    get: function get() {\n      return this._mesh.material;\n    },\n    set: function set(value) {\n      this._mesh.material = value;\n    }\n  });\n  Object.assign(FullScreenQuad.prototype, {\n    dispose: function dispose() {\n      this._mesh.geometry.dispose();\n    },\n    render: function render(renderer) {\n      renderer.render(this._mesh, camera);\n    }\n  });\n  return FullScreenQuad;\n}();\nexport { Pass };","map":{"version":3,"names":["OrthographicCamera","PlaneBufferGeometry","Mesh","Pass","enabled","needsSwap","clear","renderToScreen","Object","assign","prototype","setSize","render","console","error","FullScreenQuad","camera","geometry","material","_mesh","defineProperty","get","set","value","dispose","renderer"],"sources":["/Users/jphenessey/code/minisite/node_modules/three/examples/jsm/postprocessing/Pass.js"],"sourcesContent":["import {\n\tOrthographicCamera,\n\tPlaneBufferGeometry,\n\tMesh\n} from \"../../../build/three.module.js\";\n\nfunction Pass() {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n}\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\n\n// Important: It's actually a hack to put FullScreenQuad into the Pass namespace. This is only\n// done to make examples/js code work. Normally, FullScreenQuad should be exported\n// from this module like Pass.\n\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\tdispose: function () {\n\n\t\t\tthis._mesh.geometry.dispose();\n\n\t\t},\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { Pass };\n"],"mappings":"AAAA,SACCA,kBAAkB,EAClBC,mBAAmB,EACnBC,IAAI,QACE,gCAAgC;AAEvC,SAASC,IAAIA,CAAA,EAAG;EAEf;EACA,IAAI,CAACC,OAAO,GAAG,IAAI;;EAEnB;EACA,IAAI,CAACC,SAAS,GAAG,IAAI;;EAErB;EACA,IAAI,CAACC,KAAK,GAAG,KAAK;;EAElB;EACA,IAAI,CAACC,cAAc,GAAG,KAAK;AAE5B;AAEAC,MAAM,CAACC,MAAM,CAAEN,IAAI,CAACO,SAAS,EAAE;EAE9BC,OAAO,EAAE,SAAAA,QAAA,CAAW,qBAAsB,CAAC,CAAC;EAE5CC,MAAM,EAAE,SAAAA,OAAA,CAAW;EAAA,EAAiE;IAEnFC,OAAO,CAACC,KAAK,CAAE,4DAA4D,CAAE;EAE9E;AAED,CAAC,CAAE;;AAEH;;AAEA;AACA;AACA;;AAEAX,IAAI,CAACY,cAAc,GAAK,YAAY;EAEnC,IAAIC,MAAM,GAAG,IAAIhB,kBAAkB,CAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;EAC3D,IAAIiB,QAAQ,GAAG,IAAIhB,mBAAmB,CAAE,CAAC,EAAE,CAAC,CAAE;EAE9C,IAAIc,cAAc,GAAG,SAAjBA,cAAcA,CAAcG,QAAQ,EAAG;IAE1C,IAAI,CAACC,KAAK,GAAG,IAAIjB,IAAI,CAAEe,QAAQ,EAAEC,QAAQ,CAAE;EAE5C,CAAC;EAEDV,MAAM,CAACY,cAAc,CAAEL,cAAc,CAACL,SAAS,EAAE,UAAU,EAAE;IAE5DW,GAAG,EAAE,SAAAA,IAAA,EAAY;MAEhB,OAAO,IAAI,CAACF,KAAK,CAACD,QAAQ;IAE3B,CAAC;IAEDI,GAAG,EAAE,SAAAA,IAAWC,KAAK,EAAG;MAEvB,IAAI,CAACJ,KAAK,CAACD,QAAQ,GAAGK,KAAK;IAE5B;EAED,CAAC,CAAE;EAEHf,MAAM,CAACC,MAAM,CAAEM,cAAc,CAACL,SAAS,EAAE;IAExCc,OAAO,EAAE,SAAAA,QAAA,EAAY;MAEpB,IAAI,CAACL,KAAK,CAACF,QAAQ,CAACO,OAAO,EAAE;IAE9B,CAAC;IAEDZ,MAAM,EAAE,SAAAA,OAAWa,QAAQ,EAAG;MAE7BA,QAAQ,CAACb,MAAM,CAAE,IAAI,CAACO,KAAK,EAAEH,MAAM,CAAE;IAEtC;EAED,CAAC,CAAE;EAEH,OAAOD,cAAc;AAEtB,CAAC,EAAI;AAEL,SAASZ,IAAI"},"metadata":{},"sourceType":"module"}