{"ast":null,"code":"var _jsxFileName = \"/Users/jphenessey/code/minisite/src/demos/Effects.js\",\n  _s = $RefreshSig$();\nimport * as THREE from 'three';\nimport React, { useMemo, useEffect, useRef } from 'react';\nimport { useThree, useFrame, extend } from 'react-three-fiber';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';\nimport { SavePass } from 'three/examples/jsm/postprocessing/SavePass';\nimport { CopyShader } from 'three/examples/jsm/shaders/CopyShader';\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nextend({\n  EffectComposer: EffectComposer,\n  ShaderPass: ShaderPass,\n  SavePass: SavePass,\n  RenderPass: RenderPass\n});\n\n// Shader that composites the r,g,b channels of 3 textures, respectively\nvar triColorMix = {\n  uniforms: {\n    tDiffuse1: {\n      value: null\n    },\n    tDiffuse2: {\n      value: null\n    },\n    tDiffuse3: {\n      value: null\n    }\n  },\n  vertexShader: \"\\n    varying vec2 vUv;\\n    void main() {\\n      vUv = uv;\\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1);\\n    }\\n  \",\n  fragmentShader: \"\\n    varying vec2 vUv;\\n    uniform sampler2D tDiffuse1;\\n    uniform sampler2D tDiffuse2;\\n    uniform sampler2D tDiffuse3;\\n    \\n    void main() {\\n      vec4 del0 = texture2D(tDiffuse1, vUv);\\n      vec4 del1 = texture2D(tDiffuse2, vUv);\\n      vec4 del2 = texture2D(tDiffuse3, vUv);\\n      // min alpha hides until all buffers are full\\n      float alpha = min(min(del0.a, del1.a), del2.a);\\n      gl_FragColor = vec4(del0.r, del1.g, del2.b, alpha);\\n    }\\n  \"\n};\nexport function Effects() {\n  _s();\n  var composer = useRef();\n  var savePass = useRef();\n  var blendPass = useRef();\n  var swap = useRef(false); // Whether we need to swap the delay buffers\n  var _useThree = useThree(),\n    scene = _useThree.scene,\n    gl = _useThree.gl,\n    size = _useThree.size,\n    camera = _useThree.camera;\n  var _useMemo = useMemo(function () {\n      // Spare render targets for holding the previous two individual frames\n      var rtA = new THREE.WebGLRenderTarget(size.width, size.height);\n      var rtB = new THREE.WebGLRenderTarget(size.width, size.height);\n      return {\n        rtA: rtA,\n        rtB: rtB\n      };\n    }, [size]),\n    rtA = _useMemo.rtA,\n    rtB = _useMemo.rtB;\n  var pixelRatio = gl.getPixelRatio(); // Needed for anti-aliasing pass\n  useEffect(function () {\n    return void composer.current.setSize(size.width, size.height);\n  }, [size]);\n  useFrame(function () {\n    composer.current.render();\n    // Swap render targets and update dependencies\n    var delay1 = swap.current ? rtB : rtA;\n    var delay2 = swap.current ? rtA : rtB;\n    savePass.current.renderTarget = delay2;\n    blendPass.current.uniforms['tDiffuse2'].value = delay1.texture;\n    blendPass.current.uniforms['tDiffuse3'].value = delay2.texture;\n    swap.current = !swap.current;\n  }, 1);\n  return /*#__PURE__*/_jsxDEV(\"effectComposer\", {\n    ref: composer,\n    args: [gl],\n    children: [/*#__PURE__*/_jsxDEV(\"renderPass\", {\n      attachArray: \"passes\",\n      scene: scene,\n      camera: camera\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"shaderPass\", {\n      attachArray: \"passes\",\n      ref: blendPass,\n      args: [triColorMix, 'tDiffuse1'],\n      needsSwap: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"savePass\", {\n      attachArray: \"passes\",\n      ref: savePass,\n      needsSwap: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"shaderPass\", {\n      attachArray: \"passes\",\n      args: [FXAAShader],\n      \"uniforms-resolution-value-x\": 1 / (size.width * pixelRatio),\n      \"uniforms-resolution-value-y\": 1 / (size.height * pixelRatio)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"shaderPass\", {\n      attachArray: \"passes\",\n      args: [CopyShader]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(Effects, \"i1tFNrAsQ5oE5O2jOEEaQ5cCQ4A=\", false, function () {\n  return [useThree, useFrame];\n});\n_c = Effects;\nvar _c;\n$RefreshReg$(_c, \"Effects\");","map":{"version":3,"names":["THREE","React","useMemo","useEffect","useRef","useThree","useFrame","extend","EffectComposer","ShaderPass","SavePass","CopyShader","FXAAShader","RenderPass","jsxDEV","_jsxDEV","triColorMix","uniforms","tDiffuse1","value","tDiffuse2","tDiffuse3","vertexShader","fragmentShader","Effects","_s","composer","savePass","blendPass","swap","_useThree","scene","gl","size","camera","_useMemo","rtA","WebGLRenderTarget","width","height","rtB","pixelRatio","getPixelRatio","current","setSize","render","delay1","delay2","renderTarget","texture","ref","args","children","attachArray","fileName","_jsxFileName","lineNumber","columnNumber","needsSwap","_c","$RefreshReg$"],"sources":["/Users/jphenessey/code/minisite/src/demos/Effects.js"],"sourcesContent":["import * as THREE from 'three'\r\nimport React, { useMemo, useEffect, useRef } from 'react'\r\nimport { useThree, useFrame, extend } from 'react-three-fiber'\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\r\nimport { SavePass } from 'three/examples/jsm/postprocessing/SavePass'\r\nimport { CopyShader } from 'three/examples/jsm/shaders/CopyShader'\r\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader'\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\r\n\r\nextend({ EffectComposer, ShaderPass, SavePass, RenderPass })\r\n\r\n// Shader that composites the r,g,b channels of 3 textures, respectively\r\nconst triColorMix = {\r\n  uniforms: {\r\n    tDiffuse1: { value: null },\r\n    tDiffuse2: { value: null },\r\n    tDiffuse3: { value: null }\r\n  },\r\n  vertexShader: `\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vUv = uv;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1);\r\n    }\r\n  `,\r\n  fragmentShader: `\r\n    varying vec2 vUv;\r\n    uniform sampler2D tDiffuse1;\r\n    uniform sampler2D tDiffuse2;\r\n    uniform sampler2D tDiffuse3;\r\n    \r\n    void main() {\r\n      vec4 del0 = texture2D(tDiffuse1, vUv);\r\n      vec4 del1 = texture2D(tDiffuse2, vUv);\r\n      vec4 del2 = texture2D(tDiffuse3, vUv);\r\n      // min alpha hides until all buffers are full\r\n      float alpha = min(min(del0.a, del1.a), del2.a);\r\n      gl_FragColor = vec4(del0.r, del1.g, del2.b, alpha);\r\n    }\r\n  `\r\n}\r\n\r\nexport function Effects() {\r\n  const composer = useRef()\r\n  const savePass = useRef()\r\n  const blendPass = useRef()\r\n  const swap = useRef(false) // Whether we need to swap the delay buffers\r\n  const { scene, gl, size, camera } = useThree()\r\n  const { rtA, rtB } = useMemo(() => {\r\n    // Spare render targets for holding the previous two individual frames\r\n    const rtA = new THREE.WebGLRenderTarget(size.width, size.height)\r\n    const rtB = new THREE.WebGLRenderTarget(size.width, size.height)\r\n    return { rtA, rtB }\r\n  }, [size])\r\n  const pixelRatio = gl.getPixelRatio() // Needed for anti-aliasing pass\r\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size])\r\n  useFrame(() => {\r\n    composer.current.render()\r\n    // Swap render targets and update dependencies\r\n    let delay1 = swap.current ? rtB : rtA\r\n    let delay2 = swap.current ? rtA : rtB\r\n    savePass.current.renderTarget = delay2\r\n    blendPass.current.uniforms['tDiffuse2'].value = delay1.texture\r\n    blendPass.current.uniforms['tDiffuse3'].value = delay2.texture\r\n    swap.current = !swap.current\r\n  }, 1)\r\n  return (\r\n    <effectComposer ref={composer} args={[gl]}>\r\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\r\n      <shaderPass attachArray=\"passes\" ref={blendPass} args={[triColorMix, 'tDiffuse1']} needsSwap={false} />\r\n      <savePass attachArray=\"passes\" ref={savePass} needsSwap={true} />\r\n      <shaderPass\r\n        attachArray=\"passes\"\r\n        args={[FXAAShader]}\r\n        uniforms-resolution-value-x={1 / (size.width * pixelRatio)}\r\n        uniforms-resolution-value-y={1 / (size.height * pixelRatio)}\r\n      />\r\n      <shaderPass attachArray=\"passes\" args={[CopyShader]} />\r\n    </effectComposer>\r\n  )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}