{"ast":null,"code":"import { Clock, LinearFilter, Mesh, OrthographicCamera, PlaneBufferGeometry, RGBAFormat, Vector2, WebGLRenderTarget } from \"../../../build/three.module.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ShaderPass } from \"../postprocessing/ShaderPass.js\";\nimport { MaskPass } from \"../postprocessing/MaskPass.js\";\nimport { ClearMaskPass } from \"../postprocessing/MaskPass.js\";\nvar EffectComposer = function EffectComposer(renderer, renderTarget) {\n  this.renderer = renderer;\n  if (renderTarget === undefined) {\n    var parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBAFormat\n    };\n    var size = renderer.getSize(new Vector2());\n    this._pixelRatio = renderer.getPixelRatio();\n    this._width = size.width;\n    this._height = size.height;\n    renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);\n    renderTarget.texture.name = 'EffectComposer.rt1';\n  } else {\n    this._pixelRatio = 1;\n    this._width = renderTarget.width;\n    this._height = renderTarget.height;\n  }\n  this.renderTarget1 = renderTarget;\n  this.renderTarget2 = renderTarget.clone();\n  this.renderTarget2.texture.name = 'EffectComposer.rt2';\n  this.writeBuffer = this.renderTarget1;\n  this.readBuffer = this.renderTarget2;\n  this.renderToScreen = true;\n  this.passes = [];\n\n  // dependencies\n\n  if (CopyShader === undefined) {\n    console.error('THREE.EffectComposer relies on CopyShader');\n  }\n  if (ShaderPass === undefined) {\n    console.error('THREE.EffectComposer relies on ShaderPass');\n  }\n  this.copyPass = new ShaderPass(CopyShader);\n  this.clock = new Clock();\n};\nObject.assign(EffectComposer.prototype, {\n  swapBuffers: function swapBuffers() {\n    var tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  },\n  addPass: function addPass(pass) {\n    this.passes.push(pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  },\n  insertPass: function insertPass(pass, index) {\n    this.passes.splice(index, 0, pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  },\n  removePass: function removePass(pass) {\n    var index = this.passes.indexOf(pass);\n    if (index !== -1) {\n      this.passes.splice(index, 1);\n    }\n  },\n  isLastEnabledPass: function isLastEnabledPass(passIndex) {\n    for (var i = passIndex + 1; i < this.passes.length; i++) {\n      if (this.passes[i].enabled) {\n        return false;\n      }\n    }\n    return true;\n  },\n  render: function render(deltaTime) {\n    // deltaTime value is in seconds\n\n    if (deltaTime === undefined) {\n      deltaTime = this.clock.getDelta();\n    }\n    var currentRenderTarget = this.renderer.getRenderTarget();\n    var maskActive = false;\n    var pass,\n      i,\n      il = this.passes.length;\n    for (i = 0; i < il; i++) {\n      pass = this.passes[i];\n      if (pass.enabled === false) continue;\n      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n      if (pass.needsSwap) {\n        if (maskActive) {\n          var context = this.renderer.getContext();\n          var stencil = this.renderer.state.buffers.stencil;\n\n          //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n          stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);\n\n          //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n          stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n        }\n        this.swapBuffers();\n      }\n      if (MaskPass !== undefined) {\n        if (pass instanceof MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n    this.renderer.setRenderTarget(currentRenderTarget);\n  },\n  reset: function reset(renderTarget) {\n    if (renderTarget === undefined) {\n      var size = this.renderer.getSize(new Vector2());\n      this._pixelRatio = this.renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  },\n  setSize: function setSize(width, height) {\n    this._width = width;\n    this._height = height;\n    var effectiveWidth = this._width * this._pixelRatio;\n    var effectiveHeight = this._height * this._pixelRatio;\n    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n    for (var i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(effectiveWidth, effectiveHeight);\n    }\n  },\n  setPixelRatio: function setPixelRatio(pixelRatio) {\n    this._pixelRatio = pixelRatio;\n    this.setSize(this._width, this._height);\n  }\n});\nvar Pass = function Pass() {\n  // if set to true, the pass is processed by the composer\n  this.enabled = true;\n\n  // if set to true, the pass indicates to swap read and write buffer after rendering\n  this.needsSwap = true;\n\n  // if set to true, the pass clears its buffer before rendering\n  this.clear = false;\n\n  // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n  this.renderToScreen = false;\n};\nObject.assign(Pass.prototype, {\n  setSize: function setSize( /* width, height */) {},\n  render: function render( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */\n  ) {\n    console.error('THREE.Pass: .render() must be implemented in derived pass.');\n  }\n});\n\n// Helper for passes that need to fill the viewport with a single quad.\nPass.FullScreenQuad = function () {\n  var camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  var geometry = new PlaneBufferGeometry(2, 2);\n  var FullScreenQuad = function FullScreenQuad(material) {\n    this._mesh = new Mesh(geometry, material);\n  };\n  Object.defineProperty(FullScreenQuad.prototype, 'material', {\n    get: function get() {\n      return this._mesh.material;\n    },\n    set: function set(value) {\n      this._mesh.material = value;\n    }\n  });\n  Object.assign(FullScreenQuad.prototype, {\n    dispose: function dispose() {\n      this._mesh.geometry.dispose();\n    },\n    render: function render(renderer) {\n      renderer.render(this._mesh, camera);\n    }\n  });\n  return FullScreenQuad;\n}();\nexport { EffectComposer, Pass };","map":{"version":3,"names":["Clock","LinearFilter","Mesh","OrthographicCamera","PlaneBufferGeometry","RGBAFormat","Vector2","WebGLRenderTarget","CopyShader","ShaderPass","MaskPass","ClearMaskPass","EffectComposer","renderer","renderTarget","undefined","parameters","minFilter","magFilter","format","size","getSize","_pixelRatio","getPixelRatio","_width","width","_height","height","texture","name","renderTarget1","renderTarget2","clone","writeBuffer","readBuffer","renderToScreen","passes","console","error","copyPass","clock","Object","assign","prototype","swapBuffers","tmp","addPass","pass","push","setSize","insertPass","index","splice","removePass","indexOf","isLastEnabledPass","passIndex","i","length","enabled","render","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","needsSwap","context","getContext","stencil","state","buffers","setFunc","NOTEQUAL","EQUAL","setRenderTarget","reset","dispose","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio","Pass","clear","FullScreenQuad","camera","geometry","material","_mesh","defineProperty","get","set","value"],"sources":["/Users/jphenessey/code/minisite/node_modules/three/examples/jsm/postprocessing/EffectComposer.js"],"sourcesContent":["import {\n\tClock,\n\tLinearFilter,\n\tMesh,\n\tOrthographicCamera,\n\tPlaneBufferGeometry,\n\tRGBAFormat,\n\tVector2,\n\tWebGLRenderTarget\n} from \"../../../build/three.module.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ShaderPass } from \"../postprocessing/ShaderPass.js\";\nimport { MaskPass } from \"../postprocessing/MaskPass.js\";\nimport { ClearMaskPass } from \"../postprocessing/MaskPass.js\";\n\nvar EffectComposer = function ( renderer, renderTarget ) {\n\n\tthis.renderer = renderer;\n\n\tif ( renderTarget === undefined ) {\n\n\t\tvar parameters = {\n\t\t\tminFilter: LinearFilter,\n\t\t\tmagFilter: LinearFilter,\n\t\t\tformat: RGBAFormat\n\t\t};\n\n\t\tvar size = renderer.getSize( new Vector2() );\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\tthis._width = size.width;\n\t\tthis._height = size.height;\n\n\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\n\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t} else {\n\n\t\tthis._pixelRatio = 1;\n\t\tthis._width = renderTarget.width;\n\t\tthis._height = renderTarget.height;\n\n\t}\n\n\tthis.renderTarget1 = renderTarget;\n\tthis.renderTarget2 = renderTarget.clone();\n\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\tthis.writeBuffer = this.renderTarget1;\n\tthis.readBuffer = this.renderTarget2;\n\n\tthis.renderToScreen = true;\n\n\tthis.passes = [];\n\n\t// dependencies\n\n\tif ( CopyShader === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t}\n\n\tif ( ShaderPass === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t}\n\n\tthis.copyPass = new ShaderPass( CopyShader );\n\n\tthis.clock = new Clock();\n\n};\n\nObject.assign( EffectComposer.prototype, {\n\n\tswapBuffers: function () {\n\n\t\tvar tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t},\n\n\taddPass: function ( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t},\n\n\tinsertPass: function ( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t},\n\n\tremovePass: function ( pass ) {\n\n\t\tconst index = this.passes.indexOf( pass );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.passes.splice( index, 1 );\n\n\t\t}\n\n\t},\n\n\tisLastEnabledPass: function ( passIndex ) {\n\n\t\tfor ( var i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\trender: function ( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tvar currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tvar maskActive = false;\n\n\t\tvar pass, i, il = this.passes.length;\n\n\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\tpass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tvar context = this.renderer.getContext();\n\t\t\t\t\tvar stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t},\n\n\treset: function ( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tvar size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tvar effectiveWidth = this._width * this._pixelRatio;\n\t\tvar effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( var i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t},\n\n\tsetPixelRatio: function ( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n} );\n\n\nvar Pass = function () {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n};\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\tdispose: function () {\n\n\t\t\tthis._mesh.geometry.dispose();\n\n\t\t},\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { EffectComposer, Pass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}