{"version":3,"sources":["demos/Effects.js","demos/Demo1.js","demos/Demo2.js","svg/jph-logo.svg","index.js"],"names":["extend","EffectComposer","ShaderPass","SavePass","RenderPass","triColorMix","uniforms","tDiffuse1","value","tDiffuse2","tDiffuse3","vertexShader","fragmentShader","Effects","composer","useRef","savePass","blendPass","swap","_useThree","useThree","scene","gl","size","camera","_useMemo","useMemo","rtA","THREE","width","height","rtB","pixelRatio","getPixelRatio","useEffect","current","setSize","useFrame","render","delay1","delay2","renderTarget","texture","_jsxs","ref","args","children","_jsx","attachArray","needsSwap","FXAAShader","CopyShader","roundedSquareWave","t","delta","a","f","Math","PI","atan","sin","Dots","vec","transform","positions","_toConsumableArray","Array","map","_","i","position","x","y","floor","random","right","distances","pos","length","cos","angleTo","_ref","clock","dist","elapsedTime","wave","copy","multiplyScalar","setPosition","setMatrixAt","instanceMatrix","needsUpdate","App","Canvas","orthographic","zoom","colorManagement","resize","polyfill","ResizeObserver","attach","arguments","undefined","ticksSpring","clickSpring","props","duration","_objectWithoutProperties","_excluded","vec3Mouse","focus","_ref2","mouse","viewport","get","sub","add","_objectSpread","color","_useState","useState","_useState2","_slicedToArray","ticks","setTicks","_useSpring","useSpring","config","tension","friction","clamp","bind","onPointerDown","e","target","setPointerCapture","pointerId","onPointerUp","Router","basename","className","Link","to","src","myLogo","alt","id","Switch","Route","exact","path","Demo1","Demo2","Redirect","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.65e4d09f.chunk.js","sourcesContent":["import * as THREE from 'three'\r\nimport React, { useMemo, useEffect, useRef } from 'react'\r\nimport { useThree, useFrame, extend } from 'react-three-fiber'\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\r\nimport { SavePass } from 'three/examples/jsm/postprocessing/SavePass'\r\nimport { CopyShader } from 'three/examples/jsm/shaders/CopyShader'\r\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader'\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\r\n\r\nextend({ EffectComposer, ShaderPass, SavePass, RenderPass })\r\n\r\n// Shader that composites the r,g,b channels of 3 textures, respectively\r\nconst triColorMix = {\r\n  uniforms: {\r\n    tDiffuse1: { value: null },\r\n    tDiffuse2: { value: null },\r\n    tDiffuse3: { value: null }\r\n  },\r\n  vertexShader: `\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vUv = uv;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1);\r\n    }\r\n  `,\r\n  fragmentShader: `\r\n    varying vec2 vUv;\r\n    uniform sampler2D tDiffuse1;\r\n    uniform sampler2D tDiffuse2;\r\n    uniform sampler2D tDiffuse3;\r\n    \r\n    void main() {\r\n      vec4 del0 = texture2D(tDiffuse1, vUv);\r\n      vec4 del1 = texture2D(tDiffuse2, vUv);\r\n      vec4 del2 = texture2D(tDiffuse3, vUv);\r\n      // min alpha hides until all buffers are full\r\n      float alpha = min(min(del0.a, del1.a), del2.a);\r\n      gl_FragColor = vec4(del0.r, del1.g, del2.b, alpha);\r\n    }\r\n  `\r\n}\r\n\r\nexport function Effects() {\r\n  const composer = useRef()\r\n  const savePass = useRef()\r\n  const blendPass = useRef()\r\n  const swap = useRef(false) // Whether we need to swap the delay buffers\r\n  const { scene, gl, size, camera } = useThree()\r\n  const { rtA, rtB } = useMemo(() => {\r\n    // Spare render targets for holding the previous two individual frames\r\n    const rtA = new THREE.WebGLRenderTarget(size.width, size.height)\r\n    const rtB = new THREE.WebGLRenderTarget(size.width, size.height)\r\n    return { rtA, rtB }\r\n  }, [size])\r\n  const pixelRatio = gl.getPixelRatio() // Needed for anti-aliasing pass\r\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size])\r\n  useFrame(() => {\r\n    composer.current.render()\r\n    // Swap render targets and update dependencies\r\n    let delay1 = swap.current ? rtB : rtA\r\n    let delay2 = swap.current ? rtA : rtB\r\n    savePass.current.renderTarget = delay2\r\n    blendPass.current.uniforms['tDiffuse2'].value = delay1.texture\r\n    blendPass.current.uniforms['tDiffuse3'].value = delay2.texture\r\n    swap.current = !swap.current\r\n  }, 1)\r\n  return (\r\n    <effectComposer ref={composer} args={[gl]}>\r\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\r\n      <shaderPass attachArray=\"passes\" ref={blendPass} args={[triColorMix, 'tDiffuse1']} needsSwap={false} />\r\n      <savePass attachArray=\"passes\" ref={savePass} needsSwap={true} />\r\n      <shaderPass\r\n        attachArray=\"passes\"\r\n        args={[FXAAShader]}\r\n        uniforms-resolution-value-x={1 / (size.width * pixelRatio)}\r\n        uniforms-resolution-value-y={1 / (size.height * pixelRatio)}\r\n      />\r\n      <shaderPass attachArray=\"passes\" args={[CopyShader]} />\r\n    </effectComposer>\r\n  )\r\n}\r\n","import React, { useMemo, useRef } from 'react'\nimport { Canvas, useFrame } from 'react-three-fiber'\nimport { Effects } from './Effects'\nimport { ResizeObserver } from '@juggle/resize-observer'\nimport * as THREE from 'three'\n\n// NON-INTERACTIVE VERSION\n\n// Equation from https://dsp.stackexchange.com/a/56529\n// Visualized here https://www.desmos.com/calculator/uakymahh4u\nconst roundedSquareWave = (t, delta, a, f) => {\n  return ((2 * a) / Math.PI) * Math.atan(Math.sin(2 * Math.PI * t * f) / delta)\n}\n\nfunction Dots() {\n  const ref = useRef() // Reference to our InstancedMesh\n  const { vec, transform, positions, distances } = useMemo(() => {\n    // Variables for intermediary calculations\n    const vec = new THREE.Vector3()\n    const transform = new THREE.Matrix4()\n\n    // Precompute randomized initial positions (array of Vector3)\n    const positions = [...Array(10000)].map((_, i) => {\n      const position = new THREE.Vector3()\n      // Place in a grid\n      position.x = (i % 100) - 50\n      position.y = Math.floor(i / 100) - 50\n\n      // Offset every other column (hexagonal pattern)\n      position.y += (i % 2) * 0.5\n\n      // Add some noise\n      position.x += Math.random() * 0.3\n      position.y += Math.random() * 0.3\n      return position\n    })\n\n    // Precompute initial distances with octagonal offset\n    const right = new THREE.Vector3(1, 0, 0)\n    const distances = positions.map((pos) => {\n      // See https://www.desmos.com/calculator/4eiqbvjdzm\n      return pos.length() + Math.cos(pos.angleTo(right) * 8) * 0.5\n    })\n    return { vec, transform, positions, distances }\n  }, [])\n  useFrame(({ clock }) => {\n    for (let i = 0; i < 10000; ++i) {\n      const dist = distances[i]\n\n      // Distance affects the wave phase\n      const t = clock.elapsedTime - dist / 25\n\n      // Oscillates between -0.4 and +0.4 with period of 3.8 seconds\n      const wave = roundedSquareWave(t, 0.15 + (0.2 * dist) / 72, 0.4, 1 / 3.8)\n\n      // Scale initial position by our oscillator\n      vec.copy(positions[i]).multiplyScalar(wave + 1.3)\n\n      // Apply the Vector3 position to the Matrix4\n      transform.setPosition(vec)\n\n      // Update Matrix4 for this instance\n      ref.current.setMatrixAt(i, transform)\n    }\n    ref.current.instanceMatrix.needsUpdate = true\n  })\n  return (\n    <instancedMesh ref={ref} args={[null, null, 10000]}>\n      <circleBufferGeometry args={[0.15]} /> {/* Circle with radius of 0.15 */}\n      <meshBasicMaterial /> {/* Default to white color */}\n    </instancedMesh>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas\n      orthographic\n      camera={{ zoom: 20 }}\n      colorManagement={false} // Disabling colorManagement gives us raw colors (pure whites)\n      resize={{ polyfill: ResizeObserver }} // Allows @react-spring/three to work in Safari\n    >\n      <color attach=\"background\" args={['black']} />\n      <Effects />\n      <Dots />\n    </Canvas>\n  )\n}\n","import React, { useMemo, useRef, useState } from 'react'\nimport { Canvas, useFrame } from 'react-three-fiber'\nimport { Effects } from './Effects'\nimport { useSpring } from '@react-spring/three'\nimport { ResizeObserver } from '@juggle/resize-observer'\nimport * as THREE from 'three'\n\n// INTERACTIVE VERSION\n\nconst roundedSquareWave = (t, delta = 0.1, a = 1, f = 1 / 10) => {\n  // Equation from https://dsp.stackexchange.com/a/56529\n  // Visualized here https://www.desmos.com/calculator/uakymahh4u\n  return ((2 * a) / Math.PI) * Math.atan(Math.sin(2 * Math.PI * t * f) / delta)\n}\n\nfunction Dots({ ticksSpring, clickSpring, duration, ...props }) {\n  const ref = useRef() // Reference to our InstancedMesh\n  const { vec, right, transform, vec3Mouse, focus, positions } = useMemo(() => {\n    // Variables for intermediary calculations\n    const vec = new THREE.Vector3()\n    const transform = new THREE.Matrix4()\n\n    // Vector pointing to the right (for angle calculations)\n    const right = new THREE.Vector3(1, 0, 0)\n\n    // True cursor position in 3D space\n    const vec3Mouse = new THREE.Vector3()\n\n    // Where the dots are clustered around\n    const focus = new THREE.Vector3()\n\n    // Precompute randomized initial positions (array of Vector3)\n    const positions = [...Array(10000)].map((_, i) => {\n      const position = new THREE.Vector3()\n\n      // Place in a grid\n      position.x = (i % 100) - 50\n      position.y = Math.floor(i / 100) - 50\n\n      // Offset every other column (hexagonal pattern)\n      position.y += (i % 2) * 0.5\n\n      // Add some noise\n      position.x += Math.random() * 0.3\n      position.y += Math.random() * 0.3\n      return position\n    })\n    return { vec, right, transform, vec3Mouse, focus, positions }\n  }, [])\n  useFrame(({ mouse, viewport }) => {\n    // Convert mouse screen coords to 3D scene coords\n    vec3Mouse.x = (mouse.x * viewport.width) / 2\n    vec3Mouse.y = (mouse.y * viewport.height) / 2\n\n    for (let i = 0; i < 10000; ++i) {\n      // Drift focus to center as click is released\n      focus.copy(vec3Mouse).multiplyScalar(clickSpring.get())\n\n      // Vec holds the dot position relative to the focus point\n      vec.copy(positions[i]).sub(focus)\n\n      // Same distance calculation as original demo\n      const dist = vec.length() + Math.cos(vec.angleTo(right) * 8) * 0.5\n\n      // This adjusts the wave input to set a suitable phase and frequency\n      const t = ticksSpring.get() / 2 + 1 / 2 - dist / 100\n      const wave = roundedSquareWave(t, 0.15 + (0.2 * dist) / 72, 0.4, 1)\n\n      // Scale dot position relative to the focus point\n      vec.multiplyScalar(wave + 1.3).add(focus)\n\n      // Set the instance's transformation matrix\n      transform.setPosition(vec)\n      ref.current.setMatrixAt(i, transform)\n    }\n    ref.current.instanceMatrix.needsUpdate = true\n  })\n  return (\n    <instancedMesh args={[null, null, 10000]} ref={ref} {...props}>\n      <circleBufferGeometry args={[0.15, 8]} />\n      <meshBasicMaterial color={'white'} />\n    </instancedMesh>\n  )\n}\n\nexport default function App() {\n  const [ticks, setTicks] = useState(0)\n  const { ticksSpring, clickSpring } = useSpring({\n    ticksSpring: ticks, // Springy tick value (each click / release is a tick)\n    clickSpring: ticks % 2 === 1 ? 1 : 0, // Springy click factor (1 means clicked, 0 means released)\n    config: { tension: 20, friction: 20, clamp: true }\n  })\n  const bind = {\n    onPointerDown: (e) => {\n      // Capture the pointer so it's still tracked outside the window\n      e.target.setPointerCapture(e.pointerId)\n      setTicks(ticks + 1)\n    },\n    onPointerUp: () => {\n      // Prevent misfires\n      if (ticks % 2 === 1) {\n        // Only finish the animation if held down for long enough\n        if (clickSpring.get() > 0.5) setTicks(ticks + 1)\n        // Otherwise undo the contraction (this way you can't speed up the animation by spam clicking)\n        else setTicks(ticks - 1)\n      }\n    }\n  }\n  return (\n    <Canvas\n      orthographic\n      colorManagement={false}\n      camera={{ position: [0, 0, 100], zoom: 20 }}\n      resize={{ polyfill: ResizeObserver }}  // Allows @react-spring/three to work in Safari\n      {...bind}\n    >\n      <color attach=\"background\" args={['black']} />\n      <Dots ticksSpring={ticksSpring} clickSpring={clickSpring} duration={3.8} />\n      <Effects />\n    </Canvas>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/jph-logo.f491a601.svg\";","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { HashRouter as Router, Switch, Route, Redirect, Link } from 'react-router-dom'\nimport './base.css'\nimport Demo1 from './demos/Demo1'\nimport Demo2 from './demos/Demo2'\nimport myLogo from './svg/jph-logo.svg'\n\n// Inspired by:\n// https://twitter.com/beesandbombs/status/1329796242298245124\n\nfunction App() {\n  return (\n    <Router basename=\"/\">\n      <div className=\"frame\">\n        <div className=\"frame__demos\">\n          <Link to=\"https://www.linkedin.com/in/johnpaulhennessy/\" className=\"frame__demo\">\n            LinkedIn \n          </Link>\n          <Link to=\"https://www.instagram.com/yewnork2\" className=\"frame__demo\">\n            Instagram\n          </Link>\n          <Link to=\"https://www.instagram.com/yewnork/?hl=en\" className=\"frame__demo\">\n            Twitter\n          </Link>\n        </div>\n      </div>\n      <div className=\"content\">\n        <div className=\"logo\"><img  src={myLogo} alt=\"SVG logo image\"/></div>\n        <h2 className=\"content__title\">John Paul Hennessy</h2>\n        <p>Product, User Experience and Brand Design</p>\n      </div>\n      <div id=\"animation\">\n        <Switch>\n          <Route exact path=\"/demo1\">\n            <Demo1 />\n          </Route>\n          <Route exact path=\"/demo2\">\n            <Demo2 />\n          </Route>\n          <Route path=\"*\">\n            <Redirect to=\"/demo1\" />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}